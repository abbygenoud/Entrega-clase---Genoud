{"ast":null,"code":"import * as i0 from \"@angular/core\";\nlet CarritoService = /*#__PURE__*/(() => {\n  class CarritoService {\n    constructor() {\n      this.carrito = [];\n      this.totalCarrito = 0;\n      const memoria = localStorage.getItem('carrito');\n      if (memoria) {\n        this.carrito = JSON.parse(memoria);\n        this.calcularTotal();\n      }\n      ;\n    }\n    //Carrito[] es un array de carrito. Accedemos a sus elementos con corchetes  \n    //esto se usa en la pag de producto\n    //como agregamos lo de cantidad hay que agregar un numero en el producto page ts porque se esperan 2 cosas, no 1\n    agregarProducto(producto, cantidad) {\n      const index = this.carrito.findIndex(item => item.producto.id === producto.id);\n      //esa linea mira todoe l carrito, pasa por todos los items y si hay algun prodcto con el mismo id quue el que quiero agregar, me devuelve en que indice del array esta\n      if (index > -1) {\n        this.carrito[index].cantidad++;\n      } else {\n        this.carrito.push({\n          producto: producto,\n          cantidad: cantidad\n        });\n      }\n      this.actualizarLocalstorage();\n      this.calcularTotal();\n    }\n    modificarCantidadProducto(idProducto, cantidadACambiar) {\n      const index = this.carrito.findIndex(item => item.producto.id === idProducto);\n      if (index > -1) {\n        this.carrito[index].cantidad = cantidadACambiar;\n      }\n      this.actualizarLocalstorage();\n      this.calcularTotal();\n    }\n    //para agregar/ borrar prod primero lo borro de la lista y despues se actualiza local storage\n    //dentro del () ponemos un nro q identifique lo que queremos borrar. En el tab3 html hay q poner id adentro del parentesis\n    eliminarProducto(id) {\n      this.carrito = this.carrito.filter(item => item.producto.id !== id);\n      this.actualizarLocalstorage();\n      this.calcularTotal();\n    }\n    limpiarCarrito() {\n      this.carrito = [];\n      this.actualizarLocalstorage();\n      this.calcularTotal();\n    }\n    actualizarLocalstorage() {\n      localStorage.setItem('carrito', JSON.stringify(this.carrito));\n    }\n    calcularTotal() {\n      this.totalCarrito = 0;\n      this.carrito.forEach(item => {\n        this.totalCarrito = this.totalCarrito + item.producto.precio * item.cantidad;\n      });\n    }\n    //el signo de pregunta indica que va a haber propiedades\n    // `` son backticks que sirve para poner variables adentro de un string y evitar muchos saltos de linea\n    generarMensaje() {\n      const primeraParte = \"https://wa.me/+54341123456?text=\";\n      let parteProductos = '';\n      this.carrito.forEach(itemCarrito => {\n        parteProductos += `*${itemCarrito.producto.nombre} - ${itemCarrito.cantidad}`;\n      });\n      const ultimaParte = `Se realizo el siguiente pedido:\n    Productos: \n    ${parteProductos}\n    Total: $${this.totalCarrito}\n    Dirección de envio: DIRECCION DE EJEMPLO`;\n      return encodeURI(primeraParte + ultimaParte);\n    }\n  }\n  CarritoService.ɵfac = function CarritoService_Factory(t) {\n    return new (t || CarritoService)();\n  };\n  CarritoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CarritoService,\n    factory: CarritoService.ɵfac,\n    providedIn: 'root'\n  });\n  return CarritoService;\n})();\nexport { CarritoService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}